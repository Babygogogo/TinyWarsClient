{
    // Place your TinyWarsGameServer 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Catch Error": {
        "scope": "typescript",
        "prefix": "ce",
        "body": [
            ".catch(err => { CompatibilityHelpers.showError(err); throw err; })",
        ],
    },
    "Import ClientErrorCode": {
        "scope": "typescript",
        "prefix": "ic",
        "body": [
            "import ClientErrorCode      = TwnsClientErrorCode.ClientErrorCode;",
        ],
    },
    "Helpers.getExisted()": {
        "scope": "typescript",
        "prefix": "hge",
        "body": [
            "Helpers.getExisted(",
        ],
    },
    "Throw Error": {
        "scope": "typescript",
        "prefix": "te",
        "body": [
            "throw Helpers.newError(`$1`);",
        ],
    },
    "Open Panel": {
        "scope": "typescript",
        "prefix": "op",
        "body": [
            "TwnsPanelManager.open(TwnsPanelConfig.Dict.$1);"
        ],
    },
    "Close Panel": {
        "scope": "typescript",
        "prefix": "cp",
        "body": [
            "TwnsPanelManager.close(TwnsPanelConfig.Dict.$1);"
        ],
    },

    "Panel UpdateOnOpenDataChanged": {
        "scope": "typescript",
        "prefix": "upd",
        "body": [
            "protected async _updateOnOpenDataChanged(): Promise<void> {",
            "    // nothing to do",
            "}",
        ],
    },
    "Panel ShowOpenAnimation": {
        "scope": "typescript",
        "prefix": "showo",
        "body": [
            "protected async _showOpenAnimation(): Promise<void> {",
        ],
    },
    "Panel ShowCloseAnimation": {
        "scope": "typescript",
        "prefix": "showc",
        "body": [
            "protected async _showCloseAnimation(): Promise<void> {",
        ],
    },
    "Panel OnOpening": {
        "scope": "typescript",
        "prefix": "ono",
        "body": [
            "protected _onOpening(): void {",
        ],
    },
    "Panel OnClosing": {
        "scope": "typescript",
        "prefix": "onc",
        "body": [
            "protected _onClosing(): void {",
        ],
    },
    "Helper Wait": {
        "scope": "typescript",
        "prefix": "hw",
        "body": [
            "await Helpers.wait(CommonConstants.DefaultTweenTime);",
        ],
    },
}
